{"ast":null,"code":"var _jsxFileName = \"/Users/morke/MergeUI+Contract-Morkeethwaveportal-starter-project-main/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"0x1F3a457ef641eBe68E2b16e3e4db230b7BD1C8C2\";\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        /*\n         * Store our data in React State\n         */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        const waveTxn = await wavePortalContract.wave(\"this is a messagee\", {\n          gasLimit: 300000\n        });\n        console.log(\"mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDC4B\\uD83C\\uDF7A Make a wish!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"To cherish the festive season I want to give the opportunity for people to wish for a beer. Setup by the Stockholm Crypto Bar initiative.\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Wish for a beer\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), allWaves.map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"OldLace\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, \"Address: \", wave.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, \"Time: \", wave.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, \"Message: \", wave.message));\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/morke/MergeUI+Contract-Morkeethwaveportal-starter-project-main/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","count","getTotalWaves","toNumber","waveTxn","gasLimit","hash","wait","map","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n\n  const contractAddress = \"0x1F3a457ef641eBe68E2b16e3e4db230b7BD1C8C2\";\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        \n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const contractABI = abi.abi;\n  \n  \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(\"this is a messagee\",\n          { gasLimit: 300000 });\n          console.log(\"mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          👋🍺 Make a wish!\n        </div>\n\n        <h3 className=\"bio\">\n          To cherish the festive season I want to give the opportunity for people to wish for a beer. Setup by the Stockholm Crypto Bar initiative.\n        </h3>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wish for a beer\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n      }\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}